ion() {
        // Initialized to the window location's path.
        expect(window.location.pathname).to.be.equal(urlElem.path);

        // Changing the urlElem's path changes the URL
        urlElem.path = '/foo/bar';
        expect(window.location.pathname).to.be.equal('/foo/bar');

        // Changing the path and sending a custom event on the window changes
        // the urlElem.
        replaceState('/baz');
        window.dispatchEvent(new CustomEvent('location-changed'));
        expect(urlElem.path).to.be.equal('/baz');
      });
      function makeTemporaryIronLocation() {
        var ironLocation = document.createElement('iron-location');
        document.body.appendChild(ironLocation);
        toRemove.push(ironLocation);
        return ironLocation
      }
      test('dealing with paths with unusual characters', function() {
        var pathEncodingExamples = {
          '/foo': '/foo',
          '/': '/',
          '/foo bar': '/foo%20bar',
          '/foo#bar': '/foo%23bar',
          '/foo?xyz': '/foo%3Fxyz',
          '/foo\'bar\'baz': '/foo\'bar\'baz',
        };

        for (var plainTextPath in pathEncodingExamples) {
          var encodedPath = pathEncodingExamples[plainTextPath];

          urlElem.path = plainTextPath;
          expect(window.location.pathname).to.be.equal(encodedPath);
          expect(urlElem.path).to.be.equal(plainTextPath);
          var temporaryIronLocation = makeTemporaryIronLocation();
          expect(temporaryIronLocation.path).to.be.equal(plainTextPath);
        }
      });
      test('dealing with hashes with unusual characters', function() {
        var hashEncodingExamples = {
          'foo': '#foo',
          '': '',
          'foo bar': ['#foo%20bar', '#foo bar'],
          'foo#bar': '#foo#bar',
          'foo?bar': '#foo?bar',
          '/foo\'bar\'baz': ['#/foo%27bar%27baz', '#/foo\'bar\'baz'],
        };
        for (var plainTextHash in hashEncodingExamples) {
          var encodedHashes = hashEncodingExamples[plainTextHash];
          if (typeof encodedHashes === 'string') {
            encodedHashes = [encodedHashes];
          }

          urlElem.hash = plainTextHash;
          expect(encodedHashes).to.contain(window.location.hash);
          expect(urlElem.hash).to.be.equal(pla